import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import streamlit as st

# 1. Prepara√ß√£o dos Dados (atualizado)

# Cria√ß√£o de um dataset sint√©tico mais variado
data = {
    'sexo': ['Masculino', 'Feminino', 'Masculino', 'Feminino', 'Masculino', 'Feminino', 'Masculino', 'Feminino', 'Feminino', 'Masculino', 'Masculino', 'Feminino'],
    'procedimento': ['Ces√°ria', 'Consulta Geral', 'Ortopedia', 'Ces√°ria', 'Consulta Geral', 'Ortopedia', 'Ces√°ria', 'Consulta Geral', 'Ces√°ria', 'Ortopedia', 'Consulta Geral', 'Ortopedia'],
    'idade': [25, 30, 40, 28, 35, 50, 27, 45, 32, 60, 33, 37],
    'fraude': [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0]  # 1 indica fraude, 0 n√£o √© fraude
}

df = pd.DataFrame(data)

# Transforma√ß√£o de dados categ√≥ricos em num√©ricos
df['sexo'] = df['sexo'].map({'Masculino': 0, 'Feminino': 1})
df['procedimento'] = df['procedimento'].map({'Ces√°ria': 0, 'Consulta Geral': 1, 'Ortopedia': 2})

# Separa√ß√£o de vari√°veis preditoras e alvo
X = df[['sexo', 'procedimento', 'idade']]
y = df['fraude']

# Divis√£o dos dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Treinamento do modelo Random Forest
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Avalia√ß√£o do modelo
y_pred = model.predict(X_test)
print(f"Acur√°cia do modelo: {accuracy_score(y_test, y_pred):.2f}")

# 2. Cria√ß√£o da Interface Streamlit

# Adicionar o logo no lado superior direito
logo_path = "logo.png"  # Substitua pelo caminho do seu arquivo de logo
st.sidebar.image(logo_path, use_column_width=True)

# Fun√ß√£o para prever fraude
def prever_fraude(sexo, procedimento, idade):
    # Converter entrada do usu√°rio para o formato esperado pelo modelo
    sexo_map = {'Masculino': 0, 'Feminino': 1}
    procedimento_map = {'Ces√°ria': 0, 'Consulta Geral': 1, 'Ortopedia': 2}
    
    # Regras l√≥gicas para detectar fraudes
    if sexo == 'Masculino' and procedimento == 'Ces√°ria':
        return 'Fraude'
    if sexo == 'Feminino' and idade < 12 and procedimento == 'Ces√°ria':
        return 'Fraude'
    
    # Prepara√ß√£o da entrada para o modelo
    entrada = [[sexo_map[sexo], procedimento_map[procedimento], idade]]
    
    # Previs√£o usando o modelo treinado
    previsao = model.predict(entrada)
    return 'Fraude' if previsao[0] == 1 else 'N√£o √© Fraude'

# Interface do Streamlit
st.title("Preven√ß√£o de Fraude")

# Input de dados do usu√°rio
sexo = st.selectbox("Selecione o sexo do paciente:", ['Masculino', 'Feminino'])
procedimento = st.selectbox("Selecione o tipo de procedimento:", ['Ces√°ria', 'Consulta Geral', 'Ortopedia'])
idade = st.slider("Idade do paciente:", 0, 100, 25)

# Bot√£o de previs√£o
if st.button("Verificar Fraude"):
    resultado = prever_fraude(sexo, procedimento, idade)
    st.write(f"Resultado da Previs√£o: {resultado}")
    
    # Exibir mensagem explicativa quando idade for menor que 12 e sexo for feminino
    if sexo == 'Feminino' and idade < 12 and procedimento == 'Ces√°ria':
        st.warning("N√£o foi identificado nenhum registro de uma mulher abaixo de 12 anos que realizou ces√°ria.")

    

    # Bot√µes de "Like" e "Dislike"
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üëç Like"):
            st.write("Voc√™ gostou do resultado!")
    with col2:
        if st.button("üëé Dislike"):
            st.write("Voc√™ n√£o gostou do resultado.")
